{
  "version": 3,
  "sources": ["../../../src/index.ts"],
  "sourceRoot": "E:\\Website\\DigiSehat - Copy\\cf-worker\\chatgpt-worker\\.wrangler\\tmp\\deploy-kSHggu",
  "sourcesContent": ["// File: cf-worker/chatgpt-worker/src/index.ts\r\n\r\nexport interface Env {\r\n\tOPENROUTER_API_KEY: string;\r\n\tALLOWED_ORIGIN: string;\r\n}\r\n\r\n// Perbarui RequestBody untuk menerima riwayat pesan\r\ninterface RequestBody {\r\n\tprompt?: string; // Tetap ada untuk kompatibilitas\r\n\tmodelName?: string;\r\n\tmessages?: { // Array untuk riwayat percakapan\r\n\t\trole: 'user' | 'model' | 'assistant' | 'system';\r\n\t\tcontent: any;\r\n\t}[];\r\n}\r\n\r\n// Helper function to create JSON response with CORS headers\r\nfunction createJsonResponse(data: any, status: number = 200, corsOrigin: string = '*') {\r\n\treturn new Response(JSON.stringify(data), {\r\n\t\tstatus: status,\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Access-Control-Allow-Origin': corsOrigin,\r\n\t\t\t'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n\t\t\t'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n\t\t},\r\n\t});\r\n}\r\n\r\nexport default {\r\n\tasync fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\r\n\t\tconst allowedOrigin = env.ALLOWED_ORIGIN || '*';\r\n\r\n\t\tif (request.method === 'OPTIONS') {\r\n\t\t\treturn new Response(null, {\r\n\t\t\t\tstatus: 204,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Access-Control-Allow-Origin': allowedOrigin,\r\n\t\t\t\t\t'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n\t\t\t\t\t'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n\t\t\t\t\t'Access-Control-Max-Age': '86400',\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (request.method !== 'POST') {\r\n\t\t\treturn createJsonResponse({ error: 'Method Not Allowed' }, 405, allowedOrigin);\r\n\t\t}\r\n\r\n\t\tconst apiKey = env.OPENROUTER_API_KEY;\r\n\t\tif (!apiKey) {\r\n\t\t\treturn createJsonResponse({ error: 'No auth credentials found' }, 500, allowedOrigin);\r\n\t\t}\r\n\r\n\t\tlet requestBody: RequestBody;\r\n\t\ttry {\r\n\t\t\trequestBody = await request.json();\r\n\t\t\t// Permintaan harus berisi 'prompt' atau 'messages'\r\n\t\t\tif (!requestBody.prompt && (!requestBody.messages || requestBody.messages.length === 0)) {\r\n\t\t\t\tthrow new Error(\"Request must include 'prompt' or a non-empty 'messages' array\");\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\treturn createJsonResponse({ error: `Bad Request: ${error.message}` }, 400, allowedOrigin);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst modelName = requestBody.modelName || 'openai/gpt-4o-mini';\r\n\t\t\tlet apiMessages;\r\n\r\n\t\t\t// Prioritaskan 'messages' jika ada untuk percakapan berlanjut\r\n\t\t\tif (requestBody.messages && requestBody.messages.length > 0) {\r\n\t\t\t\tapiMessages = requestBody.messages.map(msg => ({\r\n\t\t\t\t\t...msg,\r\n\t\t\t\t\t// API OpenRouter menggunakan 'assistant' untuk respons model\r\n\t\t\t\t\trole: msg.role === 'model' ? 'assistant' : msg.role,\r\n\t\t\t\t}));\r\n\t\t\t} else {\r\n\t\t\t\t// Gunakan 'prompt' untuk permintaan tunggal\r\n\t\t\t\tapiMessages = [{ role: 'user', content: requestBody.prompt }];\r\n\t\t\t}\r\n\r\n\t\t\tconst payload = {\r\n\t\t\t\tmodel: modelName,\r\n\t\t\t\tmessages: apiMessages,\r\n\t\t\t};\r\n\r\n\t\t\t// Panggilan ke OpenRouter tetap aman di sisi server\r\n\t\t\tconst res = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t'Authorization': `Bearer ${apiKey}`,\r\n\t\t\t\t\t'HTTP-Referer': 'https://digisehat.daivanlabs.com/',\r\n\t\t\t\t\t'X-Title': 'DigiSehat'\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(payload),\r\n\t\t\t});\r\n\r\n\t\t\tif (!res.ok) {\r\n\t\t\t\tconst errorData = await res.json() as { error?: { message?: string } };\r\n\t\t\t\tconst errorMessage = errorData.error?.message || `HTTP error! status: ${res.status}`;\r\n\t\t\t\tthrow new Error(errorMessage);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await res.json() as { choices?: { message?: { content?: string } }[] };\r\n\t\t\tconst responseText = data.choices?.[0]?.message?.content?.trim();\r\n\t\t\treturn createJsonResponse({ responseText }, 200, allowedOrigin);\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\"Error calling OpenRouter API:\", error);\r\n\t\t\treturn createJsonResponse({ error: `Internal Server Error: ${error.message}` }, 500, allowedOrigin);\r\n\t\t}\r\n\t},\r\n};\r\n"],
  "mappings": ";;;;AAkBA,SAAS,mBAAmB,MAAW,SAAiB,KAAK,aAAqB,KAAK;AACtF,SAAO,IAAI,SAAS,KAAK,UAAU,IAAI,GAAG;AAAA,IACzC;AAAA,IACA,SAAS;AAAA,MACR,gBAAgB;AAAA,MAChB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,IACjC;AAAA,EACD,CAAC;AACF;AAVS;AAYT,IAAO,gBAAQ;AAAA,EACd,MAAM,MAAM,SAAkB,KAAU,KAA0C;AACjF,UAAM,gBAAgB,IAAI,kBAAkB;AAE5C,QAAI,QAAQ,WAAW,WAAW;AACjC,aAAO,IAAI,SAAS,MAAM;AAAA,QACzB,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,+BAA+B;AAAA,UAC/B,gCAAgC;AAAA,UAChC,gCAAgC;AAAA,UAChC,0BAA0B;AAAA,QAC3B;AAAA,MACD,CAAC;AAAA,IACF;AAEA,QAAI,QAAQ,WAAW,QAAQ;AAC9B,aAAO,mBAAmB,EAAE,OAAO,qBAAqB,GAAG,KAAK,aAAa;AAAA,IAC9E;AAEA,UAAM,SAAS,IAAI;AACnB,QAAI,CAAC,QAAQ;AACZ,aAAO,mBAAmB,EAAE,OAAO,4BAA4B,GAAG,KAAK,aAAa;AAAA,IACrF;AAEA,QAAI;AACJ,QAAI;AACH,oBAAc,MAAM,QAAQ,KAAK;AAEjC,UAAI,CAAC,YAAY,WAAW,CAAC,YAAY,YAAY,YAAY,SAAS,WAAW,IAAI;AACxF,cAAM,IAAI,MAAM,+DAA+D;AAAA,MAChF;AAAA,IACD,SAAS,OAAY;AACpB,aAAO,mBAAmB,EAAE,OAAO,gBAAgB,MAAM,OAAO,GAAG,GAAG,KAAK,aAAa;AAAA,IACzF;AAEA,QAAI;AACH,YAAM,YAAY,YAAY,aAAa;AAC3C,UAAI;AAGJ,UAAI,YAAY,YAAY,YAAY,SAAS,SAAS,GAAG;AAC5D,sBAAc,YAAY,SAAS,IAAI,UAAQ;AAAA,UAC9C,GAAG;AAAA;AAAA,UAEH,MAAM,IAAI,SAAS,UAAU,cAAc,IAAI;AAAA,QAChD,EAAE;AAAA,MACH,OAAO;AAEN,sBAAc,CAAC,EAAE,MAAM,QAAQ,SAAS,YAAY,OAAO,CAAC;AAAA,MAC7D;AAEA,YAAM,UAAU;AAAA,QACf,OAAO;AAAA,QACP,UAAU;AAAA,MACX;AAGA,YAAM,MAAM,MAAM,MAAM,iDAAiD;AAAA,QACxE,QAAQ;AAAA,QACR,SAAS;AAAA,UACR,gBAAgB;AAAA,UAChB,iBAAiB,UAAU,MAAM;AAAA,UACjC,gBAAgB;AAAA,UAChB,WAAW;AAAA,QACZ;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAC7B,CAAC;AAED,UAAI,CAAC,IAAI,IAAI;AACZ,cAAM,YAAY,MAAM,IAAI,KAAK;AACjC,cAAM,eAAe,UAAU,OAAO,WAAW,uBAAuB,IAAI,MAAM;AAClF,cAAM,IAAI,MAAM,YAAY;AAAA,MAC7B;AAEA,YAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,YAAM,eAAe,KAAK,UAAU,CAAC,GAAG,SAAS,SAAS,KAAK;AAC/D,aAAO,mBAAmB,EAAE,aAAa,GAAG,KAAK,aAAa;AAAA,IAE/D,SAAS,OAAY;AACpB,cAAQ,MAAM,iCAAiC,KAAK;AACpD,aAAO,mBAAmB,EAAE,OAAO,0BAA0B,MAAM,OAAO,GAAG,GAAG,KAAK,aAAa;AAAA,IACnG;AAAA,EACD;AACD;",
  "names": []
}
